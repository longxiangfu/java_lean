##shardingshpere配置
#spring.shardingsphere.datasource.names = db0,db1
#spring.shardingsphere.datasource.db0.type = com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.db0.driver-class-name = com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.db0.jdbc-url = jdbc:mysql://localhost:3306/db0?characterEncoding=utf8&useSSL=false
#spring.shardingsphere.datasource.db0.username = root
#spring.shardingsphere.datasource.db0.password = 123456
#
#spring.shardingsphere.datasource.db1.type = com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.db1.driver-class-name = com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.db1.jdbc-url = jdbc:mysql://localhost:3306/db1?characterEncoding=utf8&useSSL=false
#spring.shardingsphere.datasource.db1.username = root
#spring.shardingsphere.datasource.db1.password = 123456
#
## 分库策略 根据id取模确定数据进哪个数据库
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column = member_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression = db$->{member_id % 2}
#
## 分表策略
## 节点 db0.t_order_0,db0.t_order_1,db0.t_order_2,db1.t_order_0,db1.t_order_1,db1.t_order_2
#spring.shardingsphere.sharding.tables.t_order.actual-data-nodes = db$->{0..1}.t_order_$->{0..2}
## 分表字段member_id
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column = member_id
## 分表策略 根据member_id取模,确定数据最终落在那个表中
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression = t_order_$->{member_id % 3}
#
## 使用SNOWFLAKE算法生成主键
#spring.shardingsphere.sharding.tables.t_order.key-generator.column = id
#spring.shardingsphere.sharding.tables.t_order.key-generator.type = SNOWFLAKE