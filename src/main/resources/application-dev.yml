spring:
    datasource:
        druid:
#            driver-class-name: com.mysql.cj.jdbc.Driver
            driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
#            url: jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=Asia/Shanghai&useSSL=false&nullNamePatternMatchesAll=true
            url: jdbc:log4jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&serverTimezone=Asia/Shanghai&useSSL=false&nullNamePatternMatchesAll=true
            username: root
            password: 123456
            #初始化时建立物理连接的个数
            initial-size: 5
            #最大连接池数量
            max-active: 20
            #最小连接池数量
            min-idle: 5
            #获取连接时的最大等待时间，单位毫秒
            max-wait: 60000
            #是否缓存preparedStatement,mysql5.5+建议开启
            pool-prepared-statements: true
            #当值大于0时poolPreparedStatements会自动修改为true
            max-pool-prepared-statement-per-connection-size: 20
            #既作为检测的间隔时间又作为testWhileIdel执行的依据
            time-between-eviction-runs-millis: 60000
            #销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
            min-evictable-idle-time-millis: 300000
            #Oracle需要打开注释
            #validation-query: SELECT 1 FROM DUAL
            #mysql需要打开注释
#            validation-query: select 'x'
#            validation-query: select 'x'
            #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
            test-while-idle: true
            #申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
            test-on-borrow: false
            #归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
            test-on-return: false
            #监控页设置
            stat-view-servlet:
                enabled: true
                url-pattern: /druid/*
                login-username: admin
                login-password: admin
            #扩展插件
            filter:
                stat:
                    log-slow-sql: true
                    slow-sql-millis: 1000
                    merge-sql: false
                wall:
                    config:
                        multi-statement-allow: true

#    jpa:
#        database: mysql
#        database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
#        hibernate:
#            ddl-auto: update
#        open-in-view: true
#        properties:
#            hibernate:
#                #配置sql输出
#                show_sql: true
#                format_sql: true
#                use_sql_comments: true
#                #配置jpa批量操作
#                jdbc.batch_size: 500
#                jdbc.batch_versioned_data: true
#                order_inserts: true
#                order_updates: true

#mongodb配置
#    data:
#        mongodb:
#            host:
#                127.0.0.1
#            port:
#                27017
#            database:
#                demo


#Jedis配置
#redis:
#    database: 0
#    host: 127.0.0.1
#    port: 6379
#    #password: 	# 密码（默认为空）
#    timeout: 6000  # 连接超时时长（毫秒）
#    jedis:
#        pool:
#            max-active: 20  # 连接池最大连接数（使用负值表示没有限制）
#            max-wait: -1      # 连接池最大阻塞等待时间（使用负值表示没有限制）
#            max-idle: 10      # 连接池中的最大空闲连接
#            min-idle: 5

#    #RedisTemplate配置
#    redis:
#        database: 0
#        #超时时间
#        timeout: 2000
#        # Redis服务器地址
#        host: 127.0.0.1
#        # Redis服务器连接端口
#        port: 6379
#        # Redis服务器连接密码（默认为空）
#        #password: root

#AES:
#    KEY: 1234567890abcdef


#condition:
#        rand:
#            type: boolean
#
#    aop:
#        #切换到CGLIB，默认false是jdk原生动态代理
#        proxy-target-class: true


#xxl:
#    job:
#        admin:
#            #xxl-job管理地址
#            addresses: http://localhost:8080/xxl-job-admin
#        #xxl-job执行器
#        executor:
#            ip:
#            port: 9999
#            logpath: E:\tianpu\data\job
#            appname: plat-job
#            #日志文件清除天数
#            logretentiondays: 30
#        accessToken:


##shardingshpere配置
#    shardingsphere:
#        datasource:
#            names: db0,db1
#            db0:
#                type: com.zaxxer.hikari.HikariDataSource
#                driver-class-name: com.mysql.cj.jdbc.Driver
#                jdbc-url: jdbc:mysql://localhost:3306/db0?characterEncoding=utf8&useSSL=false
#                username: root
#                password: 123456
#            db1:
#                type: com.zaxxer.hikari.HikariDataSource
#                driver-class-name: com.mysql.cj.jdbc.Driver
#                jdbc-url: jdbc:mysql://localhost:3306/db0?characterEncoding=utf8&useSSL=false
#                username: root
#                password: 123456
#
#        # 分库策略 根据id取模确定数据进哪个数据库
#        sharding:
#            default-database-strategy:
#                inline:
#                    sharding-column: member_id
#                    algorithm-expression: db$->{member_id % 2}
#
#            # 分表策略
#            # 节点 db0.t_order_0,db0.t_order_1,db0.t_order_2,db1.t_order_0,db1.t_order_1,db1.t_order_2
#            tables:
#                t_order:
#                    actual-data-nodes: db$->{0..1}.t_order_$->{0..2}
#                # 分表字段member_id
#                    table-strategy:
#                        inline:
#                            sharding-column: member_id
#                            # 分表策略 根据member_id取模,确定数据最终落在那个表中
#                            algorithm-expression: t_order_$->{member_id % 3}
#
#                    # 使用SNOWFLAKE算法生成主键
#                    key-generator:
#                        column: id
#                        type: SNOWFLAKE
#
#
#        # 拓展属性配置
#        props:
#            sql:
#                show: true # 打印 SQL